　
河北信息学竞赛
　
　
――李博杰  主管   肖世康  协办――
　
　您的位置：博杰学习网>>学科竞赛>>信息学（内部资料，绝密）
第四届石家庄二中NOIP模拟赛
石家庄二中校友会模拟赛
　
　
本届模拟赛已于2008年10月26日举行。
命题人： 石武、孟赫、吴鹏、刘延珍联合命题组
原始测评记录
姓名得分
吴鹏200
卢思达160
廖若晨160
王伟150
孟赫150
魏达110
李博杰100
郑达30
贾上30
孟阳20
潘宇扬20

注：零分者未记录。修正后的测评记录
姓名得分
吴鹏　
卢思达　
廖若晨　
王伟　
孟赫　
魏达　
李博杰　
郑达　
贾上　
孟阳　
潘宇扬　

注：零分者未记录。

　
历届模拟赛统一注意事项
说明：
1、     文件名（程序名和输入输出文件名）必须是小写。
2、     C/C++中函数main()的返回值类型必须是int，程序正常结束时的返回值必须是0。
3、     统一评测使用的机器配置是CPU 3.06GHz，内存256M，Windows XP Professional SP2，CENA测试器。
4、     输入输出必须严格按照标准，不得有多余的空格与换行。
5、     考试时间为3小时，满分400分。
6、     每题10个测试数据，每个测试数据10分，只有程序得出的答案与标准答案完全相符时才能得分。
7、     只提交编译后的.exe可执行文件。对未编译或因编译错误而导致的结果不正确，我们将不予重新评测。
8、     严禁对规定输入输出以外的任何文件进行读写操作，否则取消本题成绩。
　
　
模拟赛试题
　
1、LBJ序列
命题人：石武
LBJ序列(无视DNA Sequence.txt)
(abcz.c/pas/cpp/in/out)

【问题描述】
众所周知(?),一个LBJ序列是由字母A,B,C,Z组成的，这些字母对于LBJ有特殊的意义。例如，如果一个LBJ序列中包含ZBC，那么LBJ今天可能会见“鬼”；如果包含BC，LBJ就可能很不走运。
现在我们有m个不好的子串（如，ZBC），我们不想让它们出现在LBJ序列中，请你求出长度为n的LBJ序列个数。

【输入格式】
第一行两个整数m,n;
第二行到第m+1行，每行包含一个不好的子串（长度不超过10）。

【输出格式】
一个整数，长度为n的LBJ序列个数。

【数据范围】
对于30%的数据 0<n<=1000
对于全部数据 0<n<=2000000000，0<m<=10;

【样例输入】
4 3
AB
AC
AZ
AA
【样例输出】
36

【注释】
对于样例
BBA,BBB,BBC,BBZ,BCA,BCB,BCC,BCZ,BZA,BZB,BZC,BZZ
CBA,CBB,CBC,CBZ,CCA,CCB,CCC,CCZ,CZA,CZB,CZC,CZZ
ZBA,ZBB,ZBC,ZBZ,ZCA,ZCB,ZCC,ZCZ,ZZA,ZZB,ZZC,ZZZ
共36个LBJ序列
英文原版题目 From PKU
DNA Sequence

Description
It's well known that DNA Sequence is a sequence only contains A, C, T and G, and it's very useful to analyze a segment of DNA Sequence，For example, if a animal's DNA sequence contains segment ATC then it may mean that the animal may have a genetic disease. Until now scientists have found several those segments, the problem is how many kinds of DNA sequences of a species don't contain those segments.

Suppose that DNA sequences of a species is a sequence that consist of A, C, T and G，and the length of sequences is a given integer n.

Input
First line contains two integer m (0 <= m <= 10), n (1 <= n <=2000000000). Here, m is the number of genetic disease segment, and n is the length of sequences.

Next m lines each line contain a DNA genetic disease segment, and length of these segments is not larger than 10.

Output
An integer, the number of DNA sequences, mod 100000.

Sample Input

4 3
AT
AC
AG
AA

Sample Output

36

分析
本题是一个典型的递推题。解答较为复杂，请查看PKU题解。现摘录如下：
题目大意是，检测所有可能的n位DNA串有多少个DNA串中不含有指定的病毒片段。合法的DNA只能由ACTG四个字符构成。题目将给出10个以内的病毒片段，每个片段长度不超过10。数据规模n<=2 000 000 000。 下面的讲解中我们以ATC,AAA,GGC,CT这四个病毒片段为例，说明怎样像上面的题一样通过构图将问题转化为例题8。我们找出所有病毒片段的前缀， 把n位DNA分为以下7类：以AT结尾、以AA结尾、以GG结尾、以?A结尾、以?G结尾、以?C结尾和以??结尾。其中问号表示“其它情况”，它可以是 任一字母，只要这个字母不会让它所在的串成为某个病毒的前缀。显然，这些分类是全集的一个划分（交集为空，并集为全集）。现在，假如我们已经知道了长度为 n-1的各类DNA中符合要求的DNA个数，我们需要求出长度为n时各类DNA的个数。我们可以根据各类型间的转移构造一个边上带权的有向图。例如，从 AT不能转移到AA，从AT转移到??有4种方法（后面加任一字母），从?A转移到AA有1种方案（后面加个A），从?A转移到??有2种方案（后面加G 或C），从GG到??有2种方案（后面加C将构成病毒片段，不合法，只能加A和T）等等。这个图的构造过程类似于用有限状态自动机做串匹配。然后，我们就 把这个图转化成矩阵，让这个矩阵自乘n次即可。最后输出的是从??状态到所有其它状态的路径数总和。 题目中的数据规模保证前缀数不超过100，一次矩阵乘法是三方的，一共要乘log(n)次。因此这题总的复杂度是100^3 * log(n)，AC
Matrix67 ［推荐］十个用矩阵乘法解决的经典题目
http://www.matrix67.com/blog/archives/276
    题目大意是，检测所有可能的n位DNA串有多少个DNA串中不含有指定的病毒片段。合法的DNA只能由ACTG四个字符构成。题目将给出10个以内的病毒片段，每个片段长度不超过10。数据规模n<=2 000 000 000。
    下面的讲解中我们以ATC,AAA,GGC,CT这四个病毒片段为例，说明怎样像上面的题一样通过构图将问题转化为例题8。我们找出所有病毒片段的前缀，把n位DNA分为以下7类：以AT结尾、以AA结尾、以GG结尾、以?A结尾、以?G结尾、以?C结尾和以??结尾。其中问号表示“其它情况”，它可以是任一字母，只要这个字母不会让它所在的串成为某个病毒的前缀。显然，这些分类是全集的一个划分（交集为空，并集为全集）。现在，假如我们已经知道了长度为n-1的各类DNA中符合要求的DNA个数，我们需要求出长度为n时各类DNA的个数。我们可以根据各类型间的转移构造一个边上带权的有向图。例如，从AT不能转移到AA，从AT转移到??有4种方法（后面加任一字母），从?A转移到AA有1种方案（后面加个A），从?A转移到??有2种方案（后面加G或C），从GG到??有2种方案（后面加C将构成病毒片段，不合法，只能加A和T）等等。这个图的构造过程类似于用有限状态自动机做串匹配。然后，我们就把这个图转化成矩阵，让这个矩阵自乘n次即可。最后输出的是从??状态到所有其它状态的路径数总和。
    题目中的数据规模保证前缀数不超过100，一次矩阵乘法是三方的，一共要乘log(n)次。因此这题总的复杂度是100^3 * log(n)，AC了。

    最后给出第9题的代码供大家参考（今天写的，熟悉了一下C++的类和运算符重载）。为了避免大家看代码看着看着就忘了，我把这句话放在前面来说：
    Matrix67原创，转贴请注明出处。

#include <cstdio>
#define SIZE (1<<m)
#define MAX_SIZE 32
using namespace std;

class CMatrix
{
    public:
        long element[MAX_SIZE][MAX_SIZE];
        void setSize(int);
        void setModulo(int);
        CMatrix operator* (CMatrix);
        CMatrix power(int);
    private:
        int size;
        long modulo;
};

void CMatrix::setSize(int a)
{
    for (int i=0; i<a; i++)
        for (int j=0; j<a; j++)
            element[i][j]=0;
    size = a;
}

void CMatrix::setModulo(int a)
{
    modulo = a;
}

CMatrix CMatrix::operator* (CMatrix param)
{
    CMatrix product;
    product.setSize(size);
    product.setModulo(modulo);
    for (int i=0; i<size; i++)
        for (int j=0; j<size; j++)
            for (int k=0; k<size; k++)
            {
                product.element[i][j]+=element[i][k]*param.element[k][j];
                product.element[i][j]%=modulo;
            }

    return product;
}

CMatrix CMatrix::power(int exp)
{
    CMatrix tmp = (*this) * (*this);
    if (exp==1) return *this;
    else if (exp & 1) return tmp.power(exp/2) * (*this);
    else return tmp.power(exp/2);
}


int main()
{
    const int validSet[]={0,3,6,12,15,24,27,30};
    long n, m, p;
    CMatrix unit;
    
    scanf("%d%d%d", &n, &m, &p);
    unit.setSize(SIZE);
    for(int i=0; i<SIZE; i++)
        for(int j=0; j<SIZE; j++)
            if( ((~i)&j) == ((~i)&(SIZE-1)) )
            {
                bool isValid=false;
                for (int k=0; k<8; k++)isValid=isValid||(i&j)==validSet[k];
                unit.element[i][j]=isValid;
            }

    unit.setModulo(p);
    printf("%d", unit.power(n).element[SIZE-1][SIZE-1] );
    return 0;
}
　
2、子串清除
命题人：吴鹏
子串清除 Clear
Clear.c/pas/cpp
【问题描述】
    我们定义字符串A是字符串B的子串当且仅当我们能在B串中找到A串。现在给你一个字符串A，和另外一个字符串B，要你每次从B串中从左至右找第一个A串，并从B串中删除它，直到A串不为B串的子串，问你需要进行几次删除操作。
[数据范围]
目标串长度小于256，输入文件小于500kb。
[样例数据]
Clear.in:
abbbbc
hwyebpabbbbciabbbbcekrbbmqqesfvhwpvfclrc
Clear.out
2
分析
由于时限为2秒，本题用朴素算法即可解决，关键是优化算法，卡常数。
3、Snow的减肥计划
命题人：刘延珍
Snow 的减肥计划（lose.c/cpp/pas）
[背景]
Snow最近超重了，但它又是鼎鼎大名的爱吃一族。为了健康和美味兼顾，他不得不损耗一些脑细胞来为每一顿饭想一个食谱。
[题目描述]
    Snow想吃的食物有n种，编号为1~n，每一种食物都有一个基础肥胖指数f[i]（1≤i≤n，f[i]＞0）。Snow吃一顿饭需要t个连续时间单位，每个时间单位吃一种食物（不同的时间单位可以吃相同的食物）。但Snow吃的每种食物会和上一个时间单位吃的食物发生一定的作用（第一个时间单位吃的食物除外），导致这种的食物的肥胖指数发生改变。若上一个时间单位吃的食物种类为i，现在所处时间单位吃的食物种类为j（i可以等于j），则此时j的肥胖指数变为a[i%m+1][j]（m为一个任意给定的整数，保证1≤m≤n）。Snow的胃很奇特，在每个不同的时间单位会对食物产生不同的抵制作用，抵制作用的表现是使第k个时间单位所吃的食物的肥胖指数下降s[k]（s[k]≥0，若s[k]大于此时食物的肥胖指数，则此食物最终肥胖指数为0）。你的任务便是为Snow指定一个食谱，使每个时间单位Snow所吃食物的肥胖指数之和最小。
[输入文件](lose.in)
第1行，一个整数n。
第2行，n个整数，为f[1]~f[n]。
第3行，一个整数m。
以下m行，每行n个整数，其中第i行第j个整数表示a[i][j]。
下一行为一个整数t。
再下一行为t个整数，表示s[1]~s[t]。
[输出文件](lose.out)
一个整数，表示最小的肥胖指数之和。
[样例输入]
4
5 10 15 20
1
4 7 13 17
3
1 2 3
[样例输出]
7
[说明]
第一个时间单位吃第一种食物，肥胖指数为5-1=4；第二个时间单位吃第一种食物，肥胖指数为4-2=2；第三个时间单位吃第一种食物，肥胖指数为4-3=1。所以最小肥胖指数之和为7。
 
[数据规模]
对于10%数据，保证n,m,t≤10。
对于30%数据，保证n≤100，m,t≤30。
对于60%数据，保证n,,m,t≤100。
对于100%数据，保证n≤1000，m,t≤100。
    保证答案≤2147483647。
分析
本题是二维动态规划题。
　
4、LBJ的任务
命题人：孟赫
LBJ的任务(task.c)
背景：
自从LBJ加入大联盟以来，总是认真完成组织上的任务。这次倒S大联盟交给他一个艰巨的任务――盗取S的犯罪事实。而S将她全部残害人员名单都放在了她的电脑里。
在一个伸手不见五指的黑夜里，一个胖胖的黑影闪过。突然，他消失了！
吧唧――啪――啪
“妈呀，谁仍的香蕉皮？”
许久许久……
那个黑影爬到了S的计算机前，打开了它。
闪光的显示器照亮了那黑影：啊，竟然是LBJ!
“咦？竟然有密码！”LBJ挠了挠头，“让我试试。”
LBJ输入“ZJS”――“密码错误”；
“JSZ”――“密码错误”；
“SJZ”,”ZSJ”,”JZS”,”SZJ”都是错误。
LBJ甚至把 ”ZBC”,”UGLY”都试过了，可还是错误；LBJ这时输入“PangZiZhang”，登陆界面跳出一个对话框：“竟敢骂我！想要登陆吗？只要做出我的题！”。
一个算式映入LBJ的眼前，“只要你算出结果，我便让你登陆。”
由于S大脑比较缺魂儿，就只会用小写字母进行计算，且它认为a-z分别代表0-25。她还认为乘法便是一位一位的乘。且位数不够在前面补’a’。下面给出实例：
abc+abc=(a+a)(b+b)(c+c)=ce;
bb*cc=(b*c)(b*c)=cc;
zz*zy=(z*z)(z*y)=yyc;
（其中z*z=yb,z*y=xc,yba+xc=yyc。）
bc*bbb=(a*b)(b*b)(b*c)=bc;
（其中a*b=a,b*b=b,b*c=c,所以结果为abc,又因不能有多余的'a'，所以结果为bc。)
LBJ可没有多少时间了，请你帮帮他。
 
输入数据(task.in)：
   一个字符串，包含小写字母’a’-‘z’，’+’,’*’,’(‘,’)’,长度不超过4000位。
输出数据(task.out)：
   一个字符串，计算的结果，要求不允许有多余的’a’。
样例输入：
abc+bcd*(hdj+jdb)+hgh*tsy+anv
样例输出：
fymn
分析
本题标程有误。考察表达式求值、高精度运算，应特别注意这里定义的“乘法”有所不同，求值的顺序要注意，不满足交换律，只能按照优先级顺序从左至右严格计算。应注意特殊情况的处理，例如为零时要输出'a'.

　

　　
Copyright （C） 2008 石家庄二中校友会 博杰学习网
　

　 
　
 