河北信息学竞赛

李博杰 主管     肖世康 协办
　
　您的位置：博杰学习网>>学科竞赛>>信息学（内部资料，绝密）
　生成序列
01序列
Procedure poducer1(n:integer);
Var I,j:integer;
B:array[0..100] of integer;
Begin
B[0]:=0;
While b[0]=0 do
Begin
I:=n;
While b[i]=1 do dec(i);
B[i]:=1;
For j:=I+1 to n do
B[j]:=0;
End;
End; 
全排列 Procedure producer2(n:integer);
Var x,I,j,p,min:integer;
B:array[0..100] of integer;
Begin
For i:=1 to n do
B[i]:=I;
B[0]:=0;
While b[0]=0 do
Begin
I:=n;
While b[i]<b[i-1] do dec(i);
If i=0 then break;
Min:=n+1;p:=0;
For j:=i to n do
If (min>b[j]) and (b[j]>b[i-1]) then
Begin
P:=j;min:=b[j];
End;
X:=b[p];b[p]:=b[i-1];b[i-1]:=x;
For j:=I to (n+i) div 2 do
Begin
X:=b[j];b[j]:=b[n+i-j];b[n+i-j]:=x;
End;
End;
End; 
组合
Procedure producer3(n,m:integer);
Var I,j:integer;
B:array[0..100] of integer;
Begin
For i:=1 to m do
B[i]:=I;
B[0]:=0;
While b[0]=0 do
Begin
I:=m;
While b[i]=n+i-m do dec(i);
If i=0 then break;
Inc(b[i]);
For j:=I+1 to m do
B[j]:=b[j-1]+1;
End;
End; 
数论
素数的判断 朴素算法
Function isprime(n:longint):boolean;
Var i:longint;
Begin
Isprime:=true;
For i:=2 to trunc(sqrt(n)) do
If n mod i=0 then
Begin
Isprime:=false;
Exit;
End;
If i=1 then isprime:=false;
End; 
Miller_Rabbin
Function miller_rabbin(p:longint):boolean;;
Var I,x:longint;
Begin
Miller_rabbin:=true;
Randomize;
For i:=1 to 30 do
Begin
X:=trunc(random*100+1);
If modular(x,p-1,p)<>1 then//**a^(p-1) mod p
Begin
Miller_Rabbin:=false;
Exit;
End;
End;
If p=1 then miller_rabbin:=false;
End; 
分治求a^b mod c
Function modular(a,b,c:longint):longint;
Var I,j,len:longint;
Bin:array[1..50] of integer;
Begin
If b<=1 then
Begin
If b=1 then modular:=a mod c;
If b=0 then modular:=1;
Exit;
End;
Len:=0;
J:=b;
While j<>0 do
Begin
Inc(i);
Bin[i]:=j and 1;
Bin[i]:=j shr 1;
End;
J:=a;
For i:=len-1 downto 1 do
Begin
J:=j mod c*j mod c;
If bin[i]=1 then j:=a mod c*j mod c;
End;
Modular:=j;
End; 
欧几里德辗转相除法 Function gcd(va,vb:longint):longint;
Var r:longint;
Begin
While va mod vb<>0 do
Begin
R:=va mod vb;
Va:=vb;vb:=r;
End;
Gcd:=vb;
End; 
进制转换
Function change(a:string;dx,dy:longint):string;
Var temp:string;
Len,I,j,x,t:longint;
Begin
T:=0;temp:=’’;
Len:=length(a);j:=1;
For i:=len downto 1 do
Begin
If (a[i]>=’A’) and (a[i]<=’F’) then x:=ord(a[i])-55 else x:=ord(a[i])-48;
T:=t+x*j;
T:=t*dx;
End;
While t<>0 do
Begin
X:=t mod dy;
If (x>=10) and (x<=15) then temp:=temp+chr(x+55) else temp:=temp+chr(x+48);
T:=t div dy;
End;
If temp=’’ then change:=’0’ else change:=temp;
End; 
高精度计算 Procedure plus_part;
Begin
If la>lb then lc:=la else lc:=lb;
For i:=1 to lc do
Begin
C[i]:=a[i]+b[i];
C[i+1]:=c[i+1]+c[i] div 1000;
C[i]:=c[i] mod 1000;
End;
End; 
Procedure minus_part;
Begin
If la>lb then lc:=la else lc:=lb;
For i:=1 to lc do
Begin
C[i]:=a[i]-b[i];
If c[i]<0 then
Begin
C[i+1]:=c[i+1]-1;
C[i]:=c[i]+1000;
End;
End;
End; 
Procedure mult_part;
Begin
For i:=1 to la do
For j:=1 to lb do
Begin
C[la+lb-1]:=c[la+lb-1]+a[i]*b[j];
C[la+lb]:=c[la+lb]+c[la+lb-1] div 1000;
C[la+lb-1]:=c[la+lb-1] mod 1000;
End;
End;


二分法Binary Search
Procedure binary_search;
begin
left:=1;right:=n+1;c:=0;
while left<=right do
begin
mid:=(left+right) div 2;
if f[mid]=1 then
begin
right:=mid-1;
c:=mid;
end
else
begin
left:=mid+1;
c:=mid+1 ;
end;
end;
end; 
排序
直接选择排序insertion sort
Procedure insertion_sort;
Begin
For i:=1 to n do
Begin
J:=1;
While (j<i) and (a[i]>a[j]) do inc(j);
X:=a[i];
For k:=j to I-1 do
A[k+1]:=a[k];
A[j]:=x;
End;
End; 
快速排序Quicksort
Procedure qsort(be,en:longint);
Var I,j,x,mid,temp:longint;
Begin
I:=be;j:=en;mid:=(i+j) div 2;
X:=a[mid];
Repeat
While x>a[i] do inc(i);
While x<a[j] do dec(j);
If i<=j then
Begin
Temp:=a[i];a[i]:=a[j];a[j]:=temp;
Inc(i);dec(j);
End;
Until i>j;
If i<en then qsort(I,en);
If be<j then qsort(be,j);
End; 
Procedure quicksort
Begin
For i:=1 to n do
Read(a[i]);
Qsort(1,n);
End; 
堆排序Heapsort
Procedure heapsort;
Begin
Heapn:=0;
For i:=1 to n do
Begin
read(x);
Insert(x);//**Heap
End;
For i:=1 to n do
Delete(1);//**Heap
End; 
矩阵matrix
Procedure matrix;
Begin
For i:=1 to n do
For j:=1 to m do
For k:=1 to t do
C[I,j]:=c[I,j]+a[I,k]*b[k,j];
End; 
并查集Find_Union Set
Function find(x:longint):longint;
Var vi,vj,sum:longint;
Temp:array[1..10000] of longint;
Begin
Sum:=0;
Inc(sum);
Temp[sum]:=x;
Vi:=x;
While x<>sset[x] do
Begin
Inc(sum);
Temp[sum]:=sset[x];
X:=sset[x];
End;
For vj:=1 to sum do
Sset[temp[vj]]:=x;
Find:=x;
End; 
Procedure find_union set;
Begin
If find(x)=find(y) then writeln(‘YES’)
Else
Begin
X:=find(x);y:=find(y);
Sset[x]:=sset[y];
Writeln(‘NO’);
End;
End;


树结构 排序二叉树BST
Procedure insert(x:longint);
Var p,q,s:point;
Begin
New(p);p:=root;new(q);q:=nil;
New(s);s^.data:=x;s^.left:=nil;s^.right:=nil;
Flag:=true;
While flag and (p<>nil) do
Begin
Q:=p;
If p^.data>s^.data then p:=p^.left
Else
If p^.data<s^.data then p:=p^.right
Else
Begin
Flag:=false;
Exit;
End;
End;
If s^.data>q^.data then q^.right:=s else q^.left:=s;
Dispose(p);dispose(q);
End; 
Procedure bst;
Begin
New(root);
Root^.left:=nil;root^.right:=nil;
Read(x);
Root^.data:=x;
For i:=2 to n-1 do
Begin
Read(x);
Insert(x);
End;
End; 
二叉堆Heap
Procedure insert(x:longint);
Var I,j:longint;
Begin
Inc(heapn);
Heap[heapn]:=x;
I:=heapn;j:=I div 2;
While (j>0) and (heap[i]>heap[j]) do
Begin
Temp:=heap[i];heap[i]:=heap[j];heap[j]:=temp;
I:=j;j:=j div 2;
End;
End; 
Procedure delete(k:longint);
Var I,j:longint;
Begin
Heap[k]:=heap[heapn];
Dec(heapn);
I:=k;j:=k*2;
If (j+1<=heapn) and (heap[j]<heap[j+1]) then inc(j);
While (j<=heapn) and (heap[i]<heap[j]) do
Begin
Temp:=heap[i];heap[i]:=heap[j];heap[j]:=temp;
I:=j;j:=j*2;
If (j+1<=heapn) and (heap[j]<heap[j+1]) then inc(j);
End;
End; 
Procedure heap;
Begin
Heapn:=0;
for i:=1 to n do
begin
readln(x);
insert(x);
end;
for i:=n downto 1 do
delete(i);
end; 
图论
最短路径Floyed
Procedure floyed;
Begin
For k:=1 to n do
For i:=1 to n do
For j:=1 to n do
If (i<>j) and (i<>k) and (k<>j) and (g[i,k]+g[k,j]<g[I,j]) then
G[I,j]:=g[I,k]+g[k,j];
End; 
最短路径Dijkstra
Procedure dijkstra;
Begin
For k:=1 to n-1 do
Begin
I:=0;min:=maxlongint;
For j:=1 to n do
If (hash[j]=0) and (dis[j]<min) then
Begin
Min:=dis[j];
I:=j;
End;
If i=0 then exit;
Hash[i]:=1;
For j:=1 to n do
If (hash[j]=0) and (dis[i]+g[I,j]<dis[j]) then
Dis[j]:=dis[i]+g[I,j];
End;
End; 
最短路径Bellman_Ford
Procedure bellmanford;
Begin
Repeat
Flag:=true;
For i:=1 to m do
Begin
X:=line[i].x;y:=line[i].y;w:=line[i].w;
If dis[x]+w<dis[y] then
Begin
Dis[y]:=dis[x]+w;
Flag:=false;
End;
End;
Until flag;
End; 
最短路径SPFA
Procedure spfa;
Begin
Front:=0;rear:=1;
Q[1]:=s;hash[s]:=1;
While front<>rear do
Begin
X:=q[(front+1) mod maxn];
If startv[x]<>0 then
For i:=startv[x] to endv[x] do
Begin
Y:=line[i].y;w:=line[i].w;
If dis[x]>dis[y]+w then
Begin
Dis[x]:=dis[y]+w;
If hash[y]=0 then
Begin
Hash[y]:=1;
Rear:=(rear+1) mod maxn;
Q[rear]:=y;
End;
End;
End;
Front:=(front+1) mod maxn;
Hash[x]:=0;
End;
End;

MST问题Prim
Procedure prim;
Begin
for i:=1 to n-1 do
begin
line[i].x:=1;line[i].y:=i+1;line[i].w:=g[1,i+1];
end;
for k:=1 to n-1 do
begin
min:=maxlongint;i:=0;
for j:=k to n do
if line[j].w<min then
begin
min:=line[j].w;i:=j;
end;
if i=0 then exit;
temp:=line[i];line[i]:=line[k];line[k]:=temp;
x:=line[k].y;
for j:=k+1 to n-1 do
begin
y:=line[j].y;w:=g[x,y];
if w<line[i].w then
begin
line[i].w:=w;
line[i].x:=x;
end;
end;
end;
End; 
MST问题Kruscal
Procedure kruscal;
Begin
Qsort(1,m);//**Quicksort
Sum:=0;count:=0;
For j:=1 to m do
Begin
X:=find(line[i].x);y:=find(line[i].y);
If x<>y then
Begin
Sset[x]:=sset[y];//**Find_Union Set
Inc(count,line[i].w);
Inc(sum);
If sum=n-1 then break;
End;
End;
End; 
Euler图 Procedure find(x:longint);
Var I:longint;
Begin
If outdegree[x]=0 then
Begin
Inc(sum);
Cnt[sum]:=x;
End
Else
Begin
For i:=1 to n do
If g[x,i]<>0 then
Begin
G[x,i]:=0;
Dec(outdegree[x]);
Find(i);
End;
Inc(sum);
Cnt[sum]:=x;
End;
End; 
Procedure euler;
Begin
Sum:=0;
For i:=1 to n do
If odd(outdegree[i]) then begin find(i);exit;end;
Find(1);
End; 
AOV网(topo_sort)
Procedure topo_sort;
Begin
Front:=1;rear:=0;
for i:=1 to n do
If indegree[i]=0 then
Begin
Inc(rear);
Q[rear]:=I;
End;
While front<=rear do
Begin
X:=q[front];
For i:=1 to n do
If g[x,i]<>0 then
Begin
Dec(indegree[i]);
If indegree[i]=0 then
Begin
Inc(rear);
Q[rear]:=I;
End;
End’ Inc(front);
End;
End; 
AOE网 Procedure AOE;
Begin
line1:=line;
front:=1;rear:=0;
for i:=1 to n do
if indegree[i]=0 then
begin
inc(rear);
q[rear]:=i;
early[i]:=0;
end;
while front<=rear do
begin
x:=q[front];
if startv[x]<>0 then
for i:=startv[x] to endv[x] do
begin
y:=line[i].y;
w:=line[i].w;
dec(indeg[y]);
if indeg[y]=0 then
begin
inc(rear);
q[rear]:=y;
end;
if early[y]<early[x]+w then
early[y]:=early[x]+w;
end;
inc(front);
end;

line:=line1; 
for i:=1 to n do
last[i]:=maxint;
last[q[rear]]:=early[q[rear]];
for i:=rear-1 downto 1 do
begin
x:=q[i];
if startv[x]<>0 then
for j:=startv[x] to endv[x] do
if last[x]>last[line[j].y]-line[j].w then
last[x]:=last[line[j].y]-line[j].w;
end;
end; 
网络流Ford_Fulkson
Function findpath:boolean;
var i,x:longint;
begin
can:=0;
hash[s]:=maxint;
q[1]:=s;front:=1;rear:=1;
while front<=rear do
begin
x:=q[front];
for i:=1 to n do
if (hash[i]=0) and (c[x,i]-f[x,i]>0) and (min(hash[x],c[x,i]-f[x,i])>hash[i]) then
begin
inc(rear);
q[rear]:=i;
pre[i]:=x;
hash[i]:=min(hash[x],c[x,i]-f[x,i]);
end;
inc(front);
end;
can:=hash[t];
if can<>0 then findpath:=true else findpath:=false;
end; 
Procedure relax;
begin
i:=t;
while i<>s do
begin
j:=pre[i];
inc(f[j,i],can);
dec(f[i,j],can);
i:=j;
end;
end; 
Procedure Ford_Fulkson
begin
while findpath do
relax;
end;
　
　Copyright （C） 2008 石家庄二中校友会 博杰学习网

d
　 
　
 
　
　